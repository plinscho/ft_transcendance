# 
# DOCKER COMPOSE - FT_TRANSCENDANCE (  ctrl + alt + flechita   para incersion multiple de lineas  )
# 
# Cada microservicio tiene su propio docker con django instalado y su proyecto propio. 
# Todos los django están conectados a la misma base de datos, que es postgreSQL.
# El frontend hará peticiones a cada endpoint levantado por cada servicio, y no
# interactua directamente con la base de datos
#
# En concepto arquitectura monolito sería un único django 
# pero con múltiples apps y un solo Dockefile.
# 
#

services:

  nginx:
    container_name: nginx
    build: ./nginx
    ports:
      - "80:80"
      - "443:443"
    networks:
      - frontend
      - backend
    volumes:
      - ./frontend/static:/usr/share/nginx/html/static
      - ./frontend/templates:/usr/share/nginx/html/templates
#    depends_on:
#      - home_service
#      - login_service
    restart: always

  home_service:
    container_name: home_service
    build:
      context: ./django/home_service/
    command: >
      sh -c "sleep 10 &&
            python manage.py migrate &&
            gunicorn --bind 0.0.0.0:8000 config.wsgi:application"
    ports:
      - "8000:8000"
    env_file:
      - ./django/home_service/.env
    depends_on:
      - db
    networks:
      - backend
#    volumes:
#      - home_service:/usr/src/app
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000"]
      interval: 10s
      timeout: 5s
      retries: 3

#  login_service:
#    container_name: login_service
#    build:
#      context: ./django/login_service
#    ports:
#      - "8002:8000"
#    depends_on:
#      - db
#    networks:
#      - backend
#    restart: always
#    environment:
#      - DATABASE_URL=postgres://myuser:mypassword@db:5432/mydatabase
#    healthcheck:
#      test: ["CMD", "curl", "-f", "http://localhost:8000"]
#      interval: 30s
#      timeout: 10s
#      retries: 3
#
#
# game_service:
#   build:
#     context: ./django/game_service
#   ports:
#     - "8003:8000"
#   depends_on:
#     - db
#
# chat_service:
#   build:
#     context: ./django/chat_service
#   ports:
#     - "8004:8000"
#   depends_on:
#     - db
#
# profile_service:
#   build:
#     context: ./django/profile_service
#   ports:
#     - "8005:8000"
#   depends_on:
#     - db
#
  db:
    container_name: postgre
    build: 
      context: ./postgreSQL
    env_file:
      - ./.env
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
       - "5432:5432"
    networks:
      - backend
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
  
volumes:
  postgres_data:
  home_service:

networks:
  backend:
  frontend: